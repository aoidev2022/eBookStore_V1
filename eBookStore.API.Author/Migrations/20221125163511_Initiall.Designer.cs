// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBookStore.API.Author.Persistence;

namespace eBookStore.API.Author.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221125163511_Initiall")]
    partial class Initiall
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eBookStore.API.Author.Model.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("AchievedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("CenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AcademicDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AchievedOn = new DateTimeOffset(new DateTime(1980, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            AuthorId = 1,
                            CenterName = "Academy Accel",
                            Name = "Associate degrees"
                        },
                        new
                        {
                            Id = 2,
                            AchievedOn = new DateTimeOffset(new DateTime(1995, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            AuthorId = 2,
                            CenterName = "College Discover",
                            Name = "Associate degrees"
                        },
                        new
                        {
                            Id = 3,
                            AchievedOn = new DateTimeOffset(new DateTime(1990, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            AuthorId = 2,
                            CenterName = "Higher Institute",
                            Name = "Associate degrees"
                        });
                });

            modelBuilder.Entity("eBookStore.API.Author.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTimeOffset(new DateTime(1980, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            Name = "Lucas Pavack"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTimeOffset(new DateTime(1984, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            Name = "Angela Nolskyv"
                        });
                });

            modelBuilder.Entity("eBookStore.API.Author.Model.AcademicDegree", b =>
                {
                    b.HasOne("eBookStore.API.Author.Model.Author", "Author")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
